const { test } = require('../../Fixtures/pomFixture');
const data = require('../../testdata.json');
const {saveButton,success}= require('../../utils');


test.beforeEach(async ({ page,login, bookTimeOff}) => {
    await page.goto('/',{ waitUntil: 'domcontentloaded' });
    await login.loginFlow(data.Username.validEmail.emp,data.Password.validPassword);
    await bookTimeOff.timeOffRequestsPage();


  });



  test.describe('Test the Time Off Requeste Page as an Employee Role', () => {
    test.describe.configure({ mode: 'serial' });
    
    test('Add Book Time Off Reequest', async ({bookTimeOff,page}) => {
  
        await bookTimeOff.bookTimeOffButtton();
        await bookTimeOff.who(true);
        await bookTimeOff.startTime();
        await bookTimeOff.endTime();
        await bookTimeOff.reason();
        await bookTimeOff.note();
        await saveButton(page);
        await bookTimeOff.confirmSaveButton();
        
        
    });

    test('Edit the Book Time Off Request', async ({bookTimeOff,page}) => {

        await bookTimeOff.editBookTimeOff();
        await bookTimeOff.editStartTime();
        await bookTimeOff.editEndTime();
        await bookTimeOff.editReason();
        await bookTimeOff.editNote();
        await saveButton(page);
        await bookTimeOff.confirmSaveButton();


    });

    test('Canceled the Book Time Off Request', async ({bookTimeOff,page}) => {

      await bookTimeOff.requestCanceled();
      await success('Status updated successfully!',page);

    });  

  
  });